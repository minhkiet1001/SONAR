// Service for syncing appointment data across different user roles
class AppointmentSyncService {
  constructor() {
    // In a real application, this would use API endpoints
    this.apiEndpoints = {
      patient: '/api/patient/appointments',
      staff: '/api/staff/appointments',
      doctor: '/api/doctor/appointments',
      notifications: '/api/notifications'
    };
  }

  /**
   * Sync completed appointment data across all systems
   * @param {Object} appointmentData - Completed appointment data
   */
  async syncCompletedAppointment(appointmentData) {
    try {
      console.log('🔄 Starting appointment sync across systems...');
      
      // 1. Update patient's medical records
      await this.updatePatientRecords(appointmentData);
      
      // 2. Update staff appointment management
      await this.updateStaffSystem(appointmentData);
      
      // 3. Create follow-up appointment if required
      if (appointmentData.followUpRequired) {
        await this.createFollowUpAppointment(appointmentData);
      }
      
      // 4. Send notifications
      await this.sendNotifications(appointmentData);
      
      // 5. Update medication records
      if (appointmentData.medications && appointmentData.medications.length > 0) {
        await this.updateMedicationRecords(appointmentData);
      }
      
      console.log('✅ Appointment sync completed successfully');
      return { success: true, message: 'Đồng bộ dữ liệu thành công' };
      
    } catch (error) {
      console.error('❌ Appointment sync failed:', error);
      return { success: false, message: 'Lỗi đồng bộ dữ liệu', error };
    }
  }

  /**
   * Update patient's medical records and appointment history
   */
  async updatePatientRecords(appointmentData) {
    const patientUpdate = {
      patientId: appointmentData.patientId,
      appointmentHistory: {
        id: appointmentData.id,
        date: appointmentData.date,
        time: appointmentData.time,
        doctorName: 'BS. Nguyễn Văn Minh',
        diagnosis: appointmentData.diagnosis,
        medications: appointmentData.medications,
        treatments: appointmentData.treatments,
        notes: appointmentData.notes,
        status: 'completed',
        completedAt: appointmentData.completedAt
      },
      lastVisit: appointmentData.date,
      nextAppointment: appointmentData.followUpRequired ? appointmentData.nextAppointmentDate : null
    };

    // Simulate API call
    console.log('📋 Updating patient records:', patientUpdate);
    
    // In real implementation:
    // return await fetch(this.apiEndpoints.patient, {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify(patientUpdate)
    // });
    
    return Promise.resolve(patientUpdate);
  }

  /**
   * Update staff appointment management system
   */
  async updateStaffSystem(appointmentData) {
    const staffUpdate = {
      appointmentId: appointmentData.id,
      patientId: appointmentData.patientId,
      patientName: appointmentData.patientName,
      status: 'completed',
      completedBy: 'BS. Nguyễn Văn Minh',
      completedAt: appointmentData.completedAt,
      diagnosis: appointmentData.diagnosis,
      followUpRequired: appointmentData.followUpRequired,
      nextAppointmentDate: appointmentData.nextAppointmentDate,
      medications: appointmentData.medications,
      treatments: appointmentData.treatments
    };

    console.log('👥 Updating staff system:', staffUpdate);
    
    // Update staff dashboard statistics
    this.updateStaffStatistics(appointmentData);
    
    return Promise.resolve(staffUpdate);
  }

  /**
   * Create follow-up appointment automatically
   */
  async createFollowUpAppointment(appointmentData) {
    if (!appointmentData.followUpRequired || !appointmentData.nextAppointmentDate) {
      return;
    }

    const followUpAppointment = {
      id: `FU_${appointmentData.id}_${Date.now()}`,
      patientId: appointmentData.patientId,
      patientName: appointmentData.patientName,
      type: 'follow_up',
      date: appointmentData.nextAppointmentDate,
      time: '09:00', // Default time, can be adjusted by staff
      duration: 30,
      status: 'scheduled',
      reason: 'Tái khám theo chỉ định bác sĩ',
      notes: `Tái khám sau cuộc hẹn ngày ${appointmentData.date}. Chẩn đoán: ${appointmentData.diagnosis}`,
      priority: this.calculateFollowUpPriority(appointmentData),
      isVirtual: false,
      reminderSent: false,
      createdBy: 'system',
      parentAppointmentId: appointmentData.id,
      autoGenerated: true
    };

    console.log('📅 Creating follow-up appointment:', followUpAppointment);
    
    // This would create the appointment in all systems
    await this.syncNewAppointment(followUpAppointment);
    
    return followUpAppointment;
  }

  /**
   * Calculate priority for follow-up appointment based on diagnosis and treatments
   */
  calculateFollowUpPriority(appointmentData) {
    const diagnosis = appointmentData.diagnosis.toLowerCase();
    const treatments = appointmentData.treatments.join(' ').toLowerCase();
    
    // High priority conditions
    if (diagnosis.includes('aids') || 
        diagnosis.includes('nhiễm trùng cơ hội') ||
        diagnosis.includes('kháng thuốc') ||
        treatments.includes('thay đổi phác đồ') ||
        treatments.includes('tạm ngừng điều trị')) {
      return 'high';
    }
    
    // Medium priority conditions
    if (diagnosis.includes('có triệu chứng') ||
        treatments.includes('điều chỉnh liều') ||
        treatments.includes('theo dõi tác dụng phụ')) {
      return 'medium';
    }
    
    // Default to low priority
    return 'low';
  }

  /**
   * Sync new appointment across all systems
   */
  async syncNewAppointment(appointmentData) {
    // Add to doctor's schedule
    console.log('👨‍⚕️ Adding to doctor schedule:', appointmentData);
    
    // Add to staff management system
    console.log('👥 Adding to staff system:', appointmentData);
    
    // Add to patient's upcoming appointments
    console.log('🤒 Adding to patient appointments:', appointmentData);
    
    return Promise.resolve(appointmentData);
  }

  /**
   * Send notifications to relevant parties
   */
  async sendNotifications(appointmentData) {
    const notifications = [];

    // Notification to patient
    notifications.push({
      recipientId: appointmentData.patientId,
      recipientType: 'patient',
      type: 'appointment_completed',
      title: 'Kết quả khám bệnh',
      message: `Cuộc hẹn ngày ${appointmentData.date} đã hoàn thành. Chẩn đoán: ${appointmentData.diagnosis}`,
      data: {
        appointmentId: appointmentData.id,
        diagnosis: appointmentData.diagnosis,
        medications: appointmentData.medications,
        nextAppointment: appointmentData.nextAppointmentDate
      },
      priority: 'normal',
      createdAt: new Date().toISOString()
    });

    // Notification for follow-up appointment
    if (appointmentData.followUpRequired) {
      notifications.push({
        recipientId: appointmentData.patientId,
        recipientType: 'patient',
        type: 'follow_up_scheduled',
        title: 'Lịch tái khám đã được đặt',
        message: `Bạn có lịch tái khám vào ngày ${new Date(appointmentData.nextAppointmentDate).toLocaleDateString('vi-VN')}`,
        data: {
          appointmentDate: appointmentData.nextAppointmentDate,
          parentAppointmentId: appointmentData.id
        },
        priority: 'high',
        createdAt: new Date().toISOString()
      });

      // Notification to staff about new follow-up appointment
      notifications.push({
        recipientType: 'staff',
        type: 'new_appointment_created',
        title: 'Lịch tái khám mới được tạo',
        message: `Hệ thống đã tự động tạo lịch tái khám cho bệnh nhân ${appointmentData.patientName} vào ngày ${new Date(appointmentData.nextAppointmentDate).toLocaleDateString('vi-VN')}`,
        data: {
          patientId: appointmentData.patientId,
          patientName: appointmentData.patientName,
          appointmentDate: appointmentData.nextAppointmentDate,
          priority: this.calculateFollowUpPriority(appointmentData)
        },
        priority: 'normal',
        createdAt: new Date().toISOString()
      });
    }

    // Send medication reminders if new medications prescribed
    if (appointmentData.medications && appointmentData.medications.length > 0) {
      notifications.push({
        recipientId: appointmentData.patientId,
        recipientType: 'patient',
        type: 'medication_prescribed',
        title: 'Đơn thuốc mới',
        message: `Bác sĩ đã kê đơn thuốc mới cho bạn. Vui lòng tuân thủ đúng liều lượng và thời gian.`,
        data: {
          medications: appointmentData.medications,
          appointmentId: appointmentData.id
        },
        priority: 'high',
        createdAt: new Date().toISOString()
      });
    }

    console.log('🔔 Sending notifications:', notifications);
    
    // In real implementation, send to notification service
    return Promise.resolve(notifications);
  }

  /**
   * Update medication records for patient
   */
  async updateMedicationRecords(appointmentData) {
    const medicationUpdate = {
      patientId: appointmentData.patientId,
      prescribedBy: 'BS. Nguyễn Văn Minh',
      prescribedAt: appointmentData.completedAt,
      appointmentId: appointmentData.id,
      medications: appointmentData.medications.map(med => ({
        ...med,
        status: 'active',
        startDate: new Date().toISOString().split('T')[0],
        prescribedBy: 'BS. Nguyễn Văn Minh'
      }))
    };

    console.log('💊 Updating medication records:', medicationUpdate);
    
    return Promise.resolve(medicationUpdate);
  }

  /**
   * Update staff dashboard statistics
   */
  updateStaffStatistics(appointmentData) {
    const stats = {
      completedAppointments: 1,
      patientsServed: 1,
      followUpScheduled: appointmentData.followUpRequired ? 1 : 0,
      medicationsPrescribed: appointmentData.medications ? appointmentData.medications.length : 0
    };

    console.log('📊 Updating staff statistics:', stats);
    return stats;
  }

  /**
   * Get sync status for an appointment
   */
  async getSyncStatus(appointmentId) {
    // In real implementation, check sync status across all systems
    return {
      appointmentId,
      patientRecords: 'synced',
      staffSystem: 'synced',
      notifications: 'synced',
      followUpCreated: 'synced',
      lastSyncAt: new Date().toISOString()
    };
  }

  /**
   * Retry failed sync operations
   */
  async retrySyncOperation(appointmentId, operation) {
    console.log(`🔄 Retrying sync operation: ${operation} for appointment: ${appointmentId}`);
    // Implementation for retry logic
    return Promise.resolve({ success: true });
  }
}

// Export singleton instance
export const appointmentSyncService = new AppointmentSyncService();
export default appointmentSyncService; 