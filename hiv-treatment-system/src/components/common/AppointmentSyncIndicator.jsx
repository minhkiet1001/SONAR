import React, { useState, useEffect } from 'react';
import {
  CheckCircleIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  ArrowPathIcon,
  CalendarIcon,
  UserIcon,
  BeakerIcon
} from '@heroicons/react/24/outline';

const AppointmentSyncIndicator = ({ 
  appointmentId, 
  userRole, 
  showDetails = false,
  className = '' 
}) => {
  const [syncStatus, setSyncStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate checking sync status
    const checkSyncStatus = async () => {
      setIsLoading(true);
      
      // Simulate API call delay
      setTimeout(() => {
        setSyncStatus({
          appointmentId,
          status: 'synced',
          lastSyncAt: new Date().toISOString(),
          syncDetails: {
            patientRecords: 'synced',
            staffSystem: 'synced',
            notifications: 'synced',
            followUpCreated: 'synced',
            medicationRecords: 'synced'
          },
          updates: [
            {
              type: 'appointment_completed',
              message: 'K·∫øt qu·∫£ kh√°m b·ªánh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
              timestamp: new Date().toISOString()
            },
            {
              type: 'follow_up_scheduled',
              message: 'L·ªãch t√°i kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t',
              timestamp: new Date().toISOString()
            },
            {
              type: 'medication_prescribed',
              message: 'ƒê∆°n thu·ªëc m·ªõi ƒë√£ ƒë∆∞·ª£c k√™',
              timestamp: new Date().toISOString()
            }
          ]
        });
        setIsLoading(false);
      }, 1000);
    };

    if (appointmentId) {
      checkSyncStatus();
    }
  }, [appointmentId]);

  const getSyncStatusIcon = (status) => {
    switch (status) {
      case 'synced':
        return <CheckCircleIcon className="h-5 w-5 text-green-600" />;
      case 'syncing':
        return <ArrowPathIcon className="h-5 w-5 text-blue-600 animate-spin" />;
      case 'failed':
        return <ExclamationTriangleIcon className="h-5 w-5 text-red-600" />;
      case 'pending':
        return <ClockIcon className="h-5 w-5 text-yellow-600" />;
      default:
        return <ClockIcon className="h-5 w-5 text-gray-400" />;
    }
  };

  const getSyncStatusText = (status) => {
    switch (status) {
      case 'synced':
        return 'ƒê√£ ƒë·ªìng b·ªô';
      case 'syncing':
        return 'ƒêang ƒë·ªìng b·ªô';
      case 'failed':
        return 'L·ªói ƒë·ªìng b·ªô';
      case 'pending':
        return 'Ch·ªù ƒë·ªìng b·ªô';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const getSyncStatusColor = (status) => {
    switch (status) {
      case 'synced':
        return 'text-green-600 bg-green-50 border-green-200';
      case 'syncing':
        return 'text-blue-600 bg-blue-50 border-blue-200';
      case 'failed':
        return 'text-red-600 bg-red-50 border-red-200';
      case 'pending':
        return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getUpdateIcon = (type) => {
    switch (type) {
      case 'appointment_completed':
        return <CheckCircleIcon className="h-4 w-4 text-green-600" />;
      case 'follow_up_scheduled':
        return <CalendarIcon className="h-4 w-4 text-blue-600" />;
      case 'medication_prescribed':
        return <BeakerIcon className="h-4 w-4 text-purple-600" />;
      default:
        return <UserIcon className="h-4 w-4 text-gray-600" />;
    }
  };

  if (isLoading) {
    return (
      <div className={`flex items-center space-x-2 ${className}`}>
        <ArrowPathIcon className="h-4 w-4 text-gray-400 animate-spin" />
        <span className="text-sm text-gray-500">ƒêang ki·ªÉm tra tr·∫°ng th√°i...</span>
      </div>
    );
  }

  if (!syncStatus) {
    return null;
  }

  return (
    <div className={`space-y-3 ${className}`}>
      {/* Basic Sync Status */}
      <div className={`inline-flex items-center space-x-2 px-3 py-1 rounded-full border text-sm ${getSyncStatusColor(syncStatus.status)}`}>
        {getSyncStatusIcon(syncStatus.status)}
        <span className="font-medium">{getSyncStatusText(syncStatus.status)}</span>
        {syncStatus.lastSyncAt && (
          <span className="text-xs opacity-75">
            {new Date(syncStatus.lastSyncAt).toLocaleTimeString('vi-VN')}
          </span>
        )}
      </div>

      {/* Detailed Information for Patients and Staff */}
      {showDetails && syncStatus.status === 'synced' && (
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-900 mb-3">
            {userRole === 'patient' ? 'Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:' : 'Chi ti·∫øt ƒë·ªìng b·ªô:'}
          </h4>
          
          <div className="space-y-2">
            {syncStatus.updates.map((update, index) => (
              <div key={index} className="flex items-start space-x-2">
                {getUpdateIcon(update.type)}
                <div className="flex-1">
                  <p className="text-sm text-gray-700">{update.message}</p>
                  <p className="text-xs text-gray-500">
                    {new Date(update.timestamp).toLocaleString('vi-VN')}
                  </p>
                </div>
              </div>
            ))}
          </div>

          {/* Role-specific information */}
          {userRole === 'patient' && (
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                üí° <strong>L∆∞u √Ω:</strong> B·∫°n c√≥ th·ªÉ xem chi ti·∫øt k·∫øt qu·∫£ kh√°m v√† ƒë∆°n thu·ªëc trong m·ª•c "L·ªãch s·ª≠ kh√°m b·ªánh". 
                N·∫øu c√≥ l·ªãch t√°i kh√°m, h·ªá th·ªëng s·∫Ω g·ª≠i nh·∫Øc nh·ªü tr∆∞·ªõc ng√†y h·∫πn.
              </p>
            </div>
          )}

          {userRole === 'staff' && (
            <div className="mt-4 p-3 bg-green-50 rounded-lg">
              <p className="text-sm text-green-800">
                ‚úÖ <strong>Ho√†n th√†nh:</strong> T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô th√†nh c√¥ng. 
                B·ªánh nh√¢n v√† c√°c h·ªá th·ªëng li√™n quan ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
              </p>
            </div>
          )}
        </div>
      )}

      {/* Error Details */}
      {syncStatus.status === 'failed' && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-3">
          <p className="text-sm text-red-800">
            C√≥ l·ªói x·∫£y ra khi ƒë·ªìng b·ªô d·ªØ li·ªáu. Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n k·ªπ thu·∫≠t ho·∫∑c th·ª≠ l·∫°i sau.
          </p>
          <button className="mt-2 text-xs text-red-600 hover:text-red-800 underline">
            Th·ª≠ l·∫°i
          </button>
        </div>
      )}
    </div>
  );
};

export default AppointmentSyncIndicator; 